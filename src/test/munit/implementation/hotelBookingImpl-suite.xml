<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="hotelBookingImpl-suite.xml" />
	<munit:test name="getAllHotelsFlow-test1" doc:id="ef4aab35-e680-4411-a76e-54b58a2d58e4" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Call taj-ws" doc:id="8b5f0bd6-2491-474f-9022-e0e379efe239" processor="wsc:consume">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="533255cb-c068-46c7-91c0-72966c8772cd" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://getAllHotelsFlowtest1\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://getAllHotelsFlowtest1\mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy XML to JSON" doc:id="32cc3b7b-eef9-4dd1-beda-3837f313346b" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="32d35258-421a-4fc6-9c1e-d8502f3f339f" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="cc96812d-4fdd-4cc2-a985-64029415e307" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import getAllHotelsFlowtest1::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="4e42d778-37e6-4ad3-8dd0-f97860502a11" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import getAllHotelsFlowtest1::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="3cbfa83b-1c63-4029-8091-67ebc1911f03" >
				<munit:payload value="#[readUrl('classpath://getAllHotelsFlowtest1\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getAllHotelsFlowtest1\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getAllHotelsFlow" doc:id="6f410649-8149-4098-9065-45758bc003eb" name="getAllHotelsFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="1eb2cfef-58d4-4aea-afcc-98d38702269b" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getAllHotelsFlowtest1::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Logger" doc:id="b1304db1-0845-4b7e-84dc-2cee63dd3a29" processor="logger" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="b11c2e6f-c764-4e49-b5ae-a1da682afa5b" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Verify XML to JSON" doc:id="43003949-a049-4085-8dc8-28348e83026c" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="32d35258-421a-4fc6-9c1e-d8502f3f339f" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="findHotelsFlow-test" doc:id="afbb438d-798d-4a7e-9ecc-8efb85f6e6f3" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Call taj-ws" doc:id="06175255-76a3-49a9-a399-00b3a3c8e5cd" processor="wsc:consume">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="3a28998b-d094-422d-922b-aaad7fb0f331" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://findHotelsFlowtest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://findHotelsFlowtest\mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy XML to JSON" doc:id="ef6fb028-975b-433a-b6fb-cd7b653e7695" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="aeba36bc-8b2c-496e-8fd9-dbe8630c98e4" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="0db4ccb2-7f11-4247-8ffd-12872c134976" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import findHotelsFlowtest::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="1ecc365e-e066-42e3-b14a-484e8f11ec80" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import findHotelsFlowtest::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="e4c14b0f-b8ef-4699-93a7-1a99ca08d27e" >
				<munit:payload value="#[readUrl('classpath://findHotelsFlowtest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://findHotelsFlowtest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to findHotelsFlow" doc:id="fff478e3-5f95-4323-9747-5d2f61c0bff7" name="findHotelsFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="cbb27971-fb20-43de-92c0-0fa52f02ba30" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import findHotelsFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Logger" doc:id="f17413d5-a7c9-4773-8670-e6a598a0c314" processor="logger" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="66591532-293e-4b49-8b28-17f150b0e20a" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Verify XML to JSON" doc:id="d6379e61-3832-4ded-ae47-42a094216948" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="aeba36bc-8b2c-496e-8fd9-dbe8630c98e4" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="bookHotelFlow-test" doc:id="301d7192-3fbd-435c-b402-f68df63fad3a" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Call taj-ws" doc:id="d27f5620-5804-492e-ba0a-19365f2259c1" processor="wsc:consume">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="9b62d4da-6ba3-4235-a76f-f4e2cbaa00b6" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://bookHotelFlowtest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://bookHotelFlowtest\mock_attributes.dwl')]" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy XML to JSON" doc:id="bc36b4f3-0075-4e1a-91c5-ec83fea37230" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="8b4de66f-d0e7-4d6c-8ac2-742477e93db7" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="ec918a41-1517-42a0-9d26-04fe3ef3f1de" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import bookHotelFlowtest::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="fa1d41af-9272-4af7-8978-6316481bf3a7" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import bookHotelFlowtest::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="1306c960-2d5a-456c-8a6c-0a634eec8d8e" >
				<munit:payload value="#[output application/json --- readUrl('classpath://bookHotelFlowtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://bookHotelFlowtest\set-event_attributes.dwl')]" />
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to bookHotelFlow" doc:id="797874ee-f7ed-4271-826b-7eeee8576b51" name="bookHotelFlow"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="d85e67dc-a5a6-45c7-8024-6da68a4c76ba" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import bookHotelFlowtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Logger" doc:id="b492390f-1122-473c-8974-20c96459aa3d" processor="logger" atLeast="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="6b108030-78cf-4b68-85fe-29b80f1d371e" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Verify XML to JSON" doc:id="df4d7375-f365-4c62-9c9b-200e0684728c" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="8b4de66f-d0e7-4d6c-8ac2-742477e93db7" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>


</mule>
